Using the terminal /Git was something that I knew as what “the programmers” do. I used terminal before to install software or fix some problems because it was necessary at that time but I was just following the instructions and I had no idea what I was doing.

This week, I learned how to use Git on Mac Terminal including how to push repo to GitHub!


Preparation -You have to download and install git to your computer (in this case Mac). (http://git-scm.com/downloads ) and you have to sign up with GitHub ( https://github.com/ )

1. First open Terminal. Then type “cd ~/Desktop as below”.

Hoshikos-MBP:~ Hoshiko$ cd ~/Desktop
cd=change directory ~/ = your user account’s home folder

2. Then type “mkdir ~/Desktop/accesscode” This made the folder “accesscode” on my Desktop!

Hoshikos-MBP:Desktop Hoshiko$ mkdir ~/Desktop/accesscode
3. Since I am learning Java using IntelliJ, I created a new project “AC_03–07” with IntelliJ inside of accesscode folder I just created above. Then checked this directly by typing “cd ~/Desktop/accesscode/AC_03–07/” and “ls”(ls =list all items in the current directly) Then I successfully saw AC_03–07.iml src in the directly.

Hoshikos-MBP:Desktop Hoshiko$ cd ~/Desktop/accesscode/AC_03–07/
Hoshikos-MBP:AC_03–07 Hoshiko$ ls
AC_03–07.iml src
4. Now I am ready to initialize the current directly (AC_03–07) to be version controlled by git! Type “git init”

Hoshikos-MBP:AC_03–07 Hoshiko$ git init
Initialized empty Git repository in /Users/Hoshiko/Desktop/accesscode/AC_03–07/.git/
5. Type “git status” to list all new or modified files to be committed.

Hoshikos-MBP:AC_03–07 Hoshiko$ git status
On branch master
Initial commit
Untracked files: (use “git add <file>…” to include in what will be committed)
.idea/ AC_03–07.iml src/
nothing added to commit but untracked files present (use “git add” to track)
6. Type “ls -a” to list all files in the current directory including hidden files.

Hoshikos-MBP:AC_03–07 Hoshiko$ ls -a . .git AC_03–07.iml .. .idea src
7. Create .gitignore file (type “touch .gitignore”) and list file names, which should be excluded from the version control. (Type “nano .gitignore”, which will open nano and you can list the file names) Any file names listed on the .gitignore rule will be ignored by git and will not be version controlled.

Hoshikos-MBP:AC_03–07 Hoshiko$ touch .gitignore
Hoshikos-MBP:AC_03–07 Hoshiko$ nano .gitignore
8. List the below 3

.DS_Store
out/
*.class
then control + “o” and enter to submit. Control+x to return to git.

9. Type “git status” to list all new or modified files to be committed. I now see .gitignore file created.

Hoshikos-MBP:AC_03–07 Hoshiko$ git status
On branch master
Initial commit
Untracked files: (use “git add <file>…” to include in what will be committed)
.gitignore .idea/ AC_03–07.iml src/
nothing added to commit but untracked files present (use “git add” to track)
10. Now type “git add .” to add all the files in the current folder to the index. (stage them) and type “git status” to list all new or modified files to be committed.

Hoshikos-MBP:AC_03–07 Hoshiko$ git add .
Hoshikos-MBP:AC_03–07 Hoshiko$ git status
On branch master
Initial commit
Changes to be committed: (use “git rm — cached <file>…” to unstage)
new file: .gitignore
new file: .idea/compiler.xml
new file: .idea/copyright/profiles_settings.xml
new file: .idea/description.html
new file: .idea/encodings.xml
new file: .idea/misc.xml
new file: .idea/modules.xml
new file: .idea/project-template.xml
new file: .idea/scopes/scope_settings.xml
new file: .idea/vcs.xml
new file: .idea/workspace.xml
new file: AC_03–07.iml
new file: src/nyc/c4q/hoshikoo/Main.java
11. Commit changes in local repository by typing “git commit -m “(any comment describes the commit, and in this case it should be initial commit)””

Hoshikos-MBP:AC_03–07 Hoshiko$ git commit -m “Initial commit” [master (root-commit) b485396] Initial commit 13 files changed, 314 insertions(+) create mode 100644 .gitignore create mode 100644 .idea/compiler.xml create mode 100644 .idea/copyright/profiles_settings.xml create mode 100644 .idea/description.html create mode 100644 .idea/encodings.xml create mode 100644 .idea/misc.xml create mode 100644 .idea/modules.xml create mode 100644 .idea/project-template.xml create mode 100644 .idea/scopes/scope_settings.xml create mode 100644 .idea/vcs.xml create mode 100644 .idea/workspace.xml create mode 100644 AC_03–07.iml create mode 100644 src/nyc/c4q/hoshikoo/Main.java
Hoshikos-MBP:AC_03–07 Hoshiko$ git log commit b4853969726244c34af8da7cb50675fda8d1ac84 Author: hoshikoo
Initial commit

12. Create the Repository at GitHub.com with pressing green button say “New” under Repositories tab. Name is as AC_03–07 (the same name as intelliJ project) and press “create the repository” and copy SSH url. (not HTTP) and use this url to add remote. To push our local repo to the GitHub server we’ll need to add a remote repository. Type “git remote add origin git@github.com:hoshikoo/AC_03–07.git”. “git remote -v” will show the place where your code is stored.

Hoshikos-MBP:AC_03–07 Hoshiko$ git remote add origin git@github.com:hoshikoo/AC_03–07.git Hoshikos-MBP:AC_03–07 Hoshiko$ git remote -v origin git@github.com:hoshikoo/AC_03–07.git (fetch) origin git@github.com:hoshikoo/AC_03–07.git (push)
13. The local git repository is connected to the gitHub and now it is ready to push the commits by typing “git push origin master”.

Hoshikos-MBP:AC_03–07 Hoshiko$ git push origin master Warning: Permanently added the RSA host key for IP address ‘xxxx’ to the list of known hosts. Counting objects: 22, done. Delta compression using up to 8 threads. Compressing objects: 100% (15/15), done. Writing objects: 100% (22/22), 5.09 KiB | 0 bytes/s, done. Total 22 (delta 0), reused 0 (delta 0) To git@github.com:hoshikoo/AC_03–07.git * [new branch] master -> master
14. After making any change to the current directry, type “git add”, “git commit -m “(any comment describes the commit)””, and “git push origin master” to push changes to GitHub.

15. “rm -rf AC_03–07/” will delete the “AC_03–07/” folder in the current directly and “git clone git@github.com:hoshikoo/AC_03–07.git” will clone the new one from the original master.